---
- name: Destroy ocp-lab node VMs
  hosts: ocp-lab.rh-lab.morey.tech  # dummy host to represent the cluster
  gather_facts: false  # Hosts may not be available, since this playbook destroys them.

  vars_prompt:
    - name: "destory_confirmation"
      prompt: "Do you want to destory the vms? (yes/no)?"
      private: false

  tasks:
    - name: Fail if not "yes"
      ansible.builtin.fail:
      when: "destory_confirmation != 'yes'"

    - name: Check if VM exists  # noqa: run-once[task]
      community.general.proxmox_vm_info:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: "{{ hostvars[item].pve_vm_id }}"
        name: "{{ hostvars[item].inventory_hostname_short }}"
        node: "{{ hostvars[item].pve_node }}"
        config: current
      loop: "{{ groups['ocp-lab-nodes'] }}"
      register: vm_state

    - name: Get VMs by host
      ansible.builtin.set_fact:
        proxmox_vms: >-
          {{
            dict(
              (vm_state.results | map(attribute='item')) |
              zip(vm_state.results | map(attribute='proxmox_vms'))
            )
          }}
        # Result: { "hostname": "proxmox_vms contents" }

    # Stop with force first before destroy to speed up.
    - name: Stop VMs  # noqa: run-once[task]
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: "{{ hostvars[item.key].pve_vm_id }}"
        name: "{{ hostvars[item.key].inventory_hostname_short }}"
        node: "{{ hostvars[item.key].pve_node }}"
        state: stopped
        force: true
        timeout: 15  # short graceful shutdown since will be destroyed.
      delegate_to: localhost
      loop: "{{ proxmox_vms | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: "item.value != []"

    - name: Destroy VMs  # noqa: run-once[task]
      community.general.proxmox_kvm:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        vmid: "{{ hostvars[item.key].pve_vm_id }}"
        name: "{{ hostvars[item.key].inventory_hostname_short }}"
        node: "{{ hostvars[item.key].pve_node }}"
        state: absent
        force: true
        timeout: 300
      delegate_to: localhost
      loop: "{{ proxmox_vms | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: "item.value != []"

    - name: Delete PVE pool  # noqa: run-once[task]
      community.general.proxmox_pool:
        api_user: "{{ api_user }}"
        api_token_id: "{{ api_token_id }}"
        api_token_secret: "{{ api_token_secret }}"
        api_host: "{{ api_host }}"
        poolid: "{{ cluster_name }}"
        state: absent
      delegate_to: localhost
      run_once: true

    - name: Delete DHCP static mappings
      pfsensible.core.pfsense_dhcp_static:
        netif: opt3
        macaddr: "{{ hostvars[item.key].mac_address }}"
        state: absent
      delegate_to: pfsense.home.morey.tech
      throttle: 1
      loop: "{{ proxmox_vms | dict2items }}"
      loop_control:
        label: "{{ item.key }}"
      when: "item.value != []"

    - name: Get a list of clusters  # noqa: run-once[task]
      rhpds.assisted_installer.list_clusters:
        offline_token: "{{ offline_token }}"
      register: listclusters
      delegate_to: localhost
      run_once: true

    - name: Remove Assisted Installer Cluster  # noqa: run-once[task]
      rhpds.assisted_installer.delete_cluster:
        cluster_id: "{{ item.id }}"
        offline_token: "{{ offline_token }}"
        # cancel: true
      loop: "{{ listclusters.result }}"
      loop_control:
        label: "{{ item.name }}, {{ item.id }}"
      when: item.name == cluster_name
      delegate_to: localhost
      run_once: true

    - name: Delete Discovery ISOs  # noqa: run-once[task]
      ansible.builtin.file:
        path: "/mnt/pve/storage-pve/template/iso/{{ cluster_name }}-{{ item.id }}-discovery.iso"
        state: absent
      loop: "{{ listclusters.result }}"
      loop_control:
        label: "{{ item.name }}, {{ item.id }}"
      when: item.name == cluster_name
      delegate_to: "{{ groups['pvems'][0] }}"  # Pick a host from the hypervisor group
      run_once: true

- name: Destroy cluster DNS
  hosts: ocp-lab-dns.rh-lab.morey.tech
  gather_facts: false  # Play have very little to do with this host.
  become: true

  tasks:
    - name: Remove DNS zone from named.conf.options  # noqa: run-once[task]
      ansible.builtin.blockinfile:
        path: /etc/bind/named.conf.options
        block: |
          zone "{{ cluster_name }}.{{ cluster_dns_zone }}" {
              type master;
              file "/etc/bind/db.{{ cluster_name }}.{{ cluster_dns_zone }}";
          };
        marker: "// {mark} ANSIBLE MANAGED BLOCK"
        insertafter: "EOF"
        state: absent
      notify: Restart BIND9

    - name: Delete DNS zone  # noqa: run-once[task]
      ansible.builtin.file:
        path: "/etc/bind/db.{{ cluster_name }}.{{ cluster_dns_zone }}"
        state: absent
      notify: Restart BIND9

  handlers:
    - name: Restart BIND9
      ansible.builtin.service:
        name: bind9
        state: reloaded
